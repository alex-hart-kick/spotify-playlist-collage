// main: ../styles.scss

  /* Breakpoints
     ========================================================================== */
  @mixin breakpoint($point) {
    @if $point == desktop1920 {
      @media (max-width: 1920px) {
        @content;
      }
    } @else if $point == desktop {
      @media (max-width: 1680px) {
        @content;
      }
    } @else if $point == desktop1679 {
      @media (max-width: 1679px) {
        @content;
      }
    } @else if $point == laptop1366 {
      @media (max-width: 1366px) {
        @content;
      }
    } @else if $point == laptop {
      @media (max-width: 1280px) {
        @content;
      }
    } @else if $point == laptop1279 {
      @media (max-width: 1279px) {
        @content;
      }
    } @else if $point == laptop1199 {
      @media (max-width: 1199px) {
        @content;
      }
    } @else if $point == laptop1180 {
      @media (max-width: 1180px) {
        @content;
      }
    } @else if $point == laptop1090 {
      @media (max-width: 1090px) {
        @content;
      }
    } @else if $point == laptop1085 {
      @media (max-width: 1085px) {
        @content;
      }
    } @else if $point == tablet {
      @media (max-width: 1024px) {
        @content;
      }
    } @else if $point == tablet1023 {
      @media (max-width: 1023px) {
        @content;
      }
    } @else if $point == phablet960 {
      @media (max-width: 960px) {
        @content;
      }
    } @else if $point == phablet799 {
      @media (max-width: 799px) {
        @content;
      }
    } @else if $point == phablet {
      @media (max-width: 768px) {
        @content;
      }
    } @else if $point == phablet767 {
      @media (max-width: 767px) {
        @content;
      }
    } @else if $point == mobile690 {
      @media (max-width: 690px) {
        @content;
      }
    } @else if $point == mobile {
      @media (max-width: 640px) {
        @content;
      }
    } @else if $point == mobile639 {
      @media (max-width: 639px) {
        @content;
      }
    } @else if $point == mobile480 {
      @media (max-width: 480px) {
        @content;
      }
    }
  }

  /* Border Radius
     ========================================================================== */
  @mixin border-radius($radius) {
    background-clip: padding-box;
    // stops bg color from leaking outside the border:
    border-radius: $radius;
  }
  // Single side border-radius
  @mixin border-top-radius($radius) {
    background-clip: padding-box;
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
  @mixin border-right-radius($radius) {
    background-clip: padding-box;
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
  }
  @mixin border-bottom-radius($radius) {
    background-clip: padding-box;
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
  }
  @mixin border-left-radius($radius) {
    background-clip: padding-box;
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
  }

  /* Transisions
     ========================================================================== */
  @mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
  }
  @mixin transition-property($property...) {
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -webkit-transition-property: $property;
    transition-property: $property;
  }
  @mixin transition-duration($duration...) {
    -moz-transition-property: $duration;
    -o-transition-property: $duration;
    -webkit-transition-property: $duration;
    transition-property: $duration;
  }
  @mixin transition-timing-function($timing...) {
    -moz-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function: $timing;
  }
  @mixin transition-delay($delay...) {
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
  }

  /* Fontface
     ========================================================================== */
    @mixin font($font-family, $font-file) {
    @font-face {
      font-family: $font-family;
      src: url($font-file+'.eot');
      src: url($font-file+'.eot?#iefix') format('embedded-opentype'),
            url($font-file+'.ttf') format('truetype'),
            url($font-file+'.svg#aller') format('svg');
      font-weight: normal;
      font-style: normal;
    }
  }

  /* Flexbox
     ========================================================================== */
  // Flexbox display
  @mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }
  // The 'flex' shorthand
  // - applies to: flex items
  // <positive-number>, initial, auto, or none
  @mixin flex($values) {
    -moz-box-flex: $values;
    -ms-flex: $values;
    -webkit-box-flex: $values;
    -webkit-flex: $values;
    flex: $values;
  }
  // Flex Flow Direction
  // - applies to: flex containers
  // row | row-reverse | column | column-reverse
  @mixin flex-direction($value: row) {
    @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
    } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
    } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
    } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }
  // Flex Line Wrapping
  // - applies to: flex containers
  // nowrap | wrap | wrap-reverse
  @mixin flex-wrap($wrap) {
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    -webkit-flex-wrap: $wrap;
    flex-wrap: $wrap;
  }
  // Flex Direction and Wrap
  // - applies to: flex containers
  // <flex-direction> || <flex-wrap>
  @mixin flex-flow($flow) {
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    -webkit-flex-flow: $flow;
    flex-flow: $flow;
  }
  // Display Order
  // - applies to: flex items
  // <integer>
  @mixin order($val) {
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-box-ordinal-group: $val;
    -webkit-order: $val;
    order: $val;
  }
  // Flex grow factor
  // - applies to: flex items
  // <number>
  @mixin flex-grow($grow) {
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    -webkit-flex-grow: $grow;
    flex-grow: $grow;
  }
  // Flex shrink
  // - applies to: flex item shrink factor
  // <number>
  @mixin flex-shrink($shrink) {
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    -webkit-flex-shrink: $shrink;
    flex-shrink: $shrink;
  }
  // Flex basis
  // - the initial main size of the flex item
  // - applies to: flex itemsnitial main size of the flex item
  // <width>
  @mixin flex-basis($width) {
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    -webkit-flex-basis: $width;
    flex-basis: $width;
  }
  // Axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | space-between | space-around
  @mixin justify-content($justify) {
    -moz-justify-content: $justify;
    -ms-flex-pack: $justify;
    -ms-justify-content: $justify;
    -webkit-justify-content: $justify;
    justify-content: $justify;
  }
  // Packing Flex Lines
  // - applies to: multi-line flex containers
  // flex-start | flex-end | center | space-between | space-around | stretch
  @mixin align-content($align) {
    -moz-align-content: $align;
    -ms-align-content: $align;
    -webkit-align-content: $align;
    align-content: $align;
  }
  // Cross-axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | baseline | stretch
  @mixin align-items($align) {
    -moz-align-items: $align;
    -ms-align-items: $align;
    -webkit-align-items: $align;
    align-items: $align;
  }
  // Cross-axis Alignment
  // - applies to: flex items
  // auto | flex-start | flex-end | center | baseline | stretch
  @mixin align-self($align) {
    -moz-align-self: $align;
    -ms-align-self: $align;
    -webkit-align-self: $align;
    align-self: $align;
  }

  /* Box Shadow
     ========================================================================== */
  @mixin box-shadow($shadow) {
    -moz-box-shadow: $shadow;
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;
  }