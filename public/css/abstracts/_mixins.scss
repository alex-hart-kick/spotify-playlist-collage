// main: ../styles.scss

/* Event Wrapper
  ==================== */
  @mixin on-event($self: false) {
    @if $self {
      &,
      &:active,
      &:focus,
      &:hover {
        @content;
      }
    } @else {
      &:active,
      &:focus,
      &:hover {
        @content;
      }
    }
  }
  // Make a context based selector a little more friendly
  @mixin when-inside($context) {
    #{$context} & {
      @content;
    }
  }

  /* Clearfix
    ==================== */
  @mixin clearfix() {
    &::after {
      display: block;
      clear: both;
      content: '';
    }
  }

  /* Breakpoints
     ========================================================================== */
  @mixin breakpoint($point) {
    @if $point == desktop1920 {
      @media (max-width: 1920px) {
        @content;
      }
    } @else if $point == desktop {
      @media (max-width: 1680px) {
        @content;
      }
    } @else if $point == desktop1679 {
      @media (max-width: 1679px) {
        @content;
      }
    } @else if $point == laptop1366 {
      @media (max-width: 1366px) {
        @content;
      }
    } @else if $point == laptop {
      @media (max-width: 1280px) {
        @content;
      }
    } @else if $point == laptop1279 {
      @media (max-width: 1279px) {
        @content;
      }
    } @else if $point == laptop1199 {
      @media (max-width: 1199px) {
        @content;
      }
    } @else if $point == laptop1180 {
      @media (max-width: 1180px) {
        @content;
      }
    } @else if $point == laptop1090 {
      @media (max-width: 1090px) {
        @content;
      }
    } @else if $point == laptop1085 {
      @media (max-width: 1085px) {
        @content;
      }
    } @else if $point == tablet {
      @media (max-width: 1024px) {
        @content;
      }
    } @else if $point == tablet1023 {
      @media (max-width: 1023px) {
        @content;
      }
    } @else if $point == phablet960 {
      @media (max-width: 960px) {
        @content;
      }
    } @else if $point == phablet799 {
      @media (max-width: 799px) {
        @content;
      }
    } @else if $point == phablet {
      @media (max-width: 768px) {
        @content;
      }
    } @else if $point == phablet767 {
      @media (max-width: 767px) {
        @content;
      }
    } @else if $point == mobile690 {
      @media (max-width: 690px) {
        @content;
      }
    } @else if $point == mobile {
      @media (max-width: 640px) {
        @content;
      }
    } @else if $point == mobile639 {
      @media (max-width: 639px) {
        @content;
      }
    } @else if $point == mobile480 {
      @media (max-width: 480px) {
        @content;
      }
    }
  }
  /* Transform
     ========================================================================== */
  // generic
  @mixin transform($transforms) {
    transform: $transforms;
  }
  // rotate
  @mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
  }
  // scale
  @mixin scale($scale) {
    @include transform(scale($scale));
  }
  // translate
  @mixin translate($x, $y) {
    @include transform(translate($x, $y));
  }
  // translate 3d
  @mixin translate3d($x, $y, $z) {
    @include transform(translate3d($x, $y, $z));
  }
  // skew
  @mixin skew($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
  }
  //transform origin
  @mixin transform-origin($origin) {
    transform-origin: $origin;
  }

  /* Border Radius
     ========================================================================== */
  @mixin border-radius($radius) {
    background-clip: padding-box;
    // stops bg color from leaking outside the border:
    border-radius: $radius;
  }
  // Single side border-radius
  @mixin border-top-radius($radius) {
    background-clip: padding-box;
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
  @mixin border-right-radius($radius) {
    background-clip: padding-box;
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
  }
  @mixin border-bottom-radius($radius) {
    background-clip: padding-box;
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
  }
  @mixin border-left-radius($radius) {
    background-clip: padding-box;
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
  }

  /* Transisions
     ========================================================================== */
  @mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
  }
  @mixin transition-property($property...) {
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -webkit-transition-property: $property;
    transition-property: $property;
  }
  @mixin transition-duration($duration...) {
    -moz-transition-property: $duration;
    -o-transition-property: $duration;
    -webkit-transition-property: $duration;
    transition-property: $duration;
  }
  @mixin transition-timing-function($timing...) {
    -moz-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function: $timing;
  }
  @mixin transition-delay($delay...) {
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
  }

  /* Backface Compatibility
     ========================================================================== */
  @mixin backface-visibility($visibility) {
    transform-origin: $visibility;
  }

  /* Animations
     ========================================================================== */
  @mixin animation-name($name...) {
    -moz-animation-name: $name;
    -o-animation-name: $name;
    -webkit-animation-name: $name;
    animation-name: $name;
  }
  @mixin animation-duration($duration...) {
    -moz-animation-duration: $duration;
    -o-animation-duration: $duration;
    -webkit-animation-duration: $duration;
    animation-duration: $duration;
  }
  @mixin animation-timing-function($timing...) {
    -moz-animation-timing-function: $timing;
    -o-animation-timing-function: $timing;
    -webkit-animation-timing-function: $timing;
    animation-timing-function: $timing;
  }
  @mixin animation-delay($delay...) {
    -moz-animation-delay: $delay;
    -o-animation-delay: $delay;
    -webkit-animation-delay: $delay;
    animation-delay: $delay;
  }
  @mixin animation-iteration-count($count...) {
    -moz-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
    -webkit-animation-iteration-count: $count;
    animation-iteration-count: $count;
  }
  @mixin animation-direction($direction...) {
    -moz-animation-direction: $direction;
    -o-animation-direction: $direction;
    -webkit-animation-direction: $direction;
    animation-direction: $direction;
  }
  @mixin animation-fill-mode($fill...) {
    -moz-animation-fill-mode: $fill;
    -o-animation-fill-mode: $fill;
    -webkit-animation-fill-mode: $fill;
    animation-fill-mode: $fill;
  }
  @mixin animation-play-state($state...) {
    -moz-animation-play-state: $state;
    -o-animation-play-state: $state;
    -webkit-animation-play-state: $state;
    animation-play-state: $state;
  }
  @mixin animation($animation...) {
    -moz-animation: $animation;
    -o-animation: $animation;
    -webkit-animation: $animation;
    animation: $animation;
  }

  /* Clip Path
     ========================================================================== */
  @mixin clip-path($clip) {
    -moz-clip-path: $clip;
    -ms-clip-path: $clip;
    -webkit-clip-path: $clip;
    clip-path: $clip;
  }

  /* Keyframes
     ========================================================================== */
  @mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
      @content;
    }
    @-moz-keyframes #{$animationName} {
      @content;
    }
    @-o-keyframes #{$animationName} {
      @content;
    }
    @keyframes #{$animationName} {
      @content;
    }
  }

  /* Fontface
     ========================================================================== */
  @mixin font-face($style-name, $file, $weight: '', $style: '') {
    $filepath: '../fonts/' + $file;
    @font-face {
      font-family: '#{$style-name}';

      @if $weight != '' {
        font-weight: #{$weight};
      }

      @if $style != '' {
        font-style: #{$style};
      }
      src: url($filepath+'.eot');
      src: url($filepath+'.eot?#iefix') format('embedded-opentype'),
        url($filepath+'.woff') format('woff'), url($filepath+'.woff2') format('woff2'),
        url($filepath+'.ttf') format('truetype');
    }
  }

  /* Flexbox
     ========================================================================== */
  // Flexbox display
  @mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }
  // The 'flex' shorthand
  // - applies to: flex items
  // <positive-number>, initial, auto, or none
  @mixin flex($values) {
    -moz-box-flex: $values;
    -ms-flex: $values;
    -webkit-box-flex: $values;
    -webkit-flex: $values;
    flex: $values;
  }
  // Flex Flow Direction
  // - applies to: flex containers
  // row | row-reverse | column | column-reverse
  @mixin flex-direction($value: row) {
    @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
    } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
    } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
    } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }
  // Flex Line Wrapping
  // - applies to: flex containers
  // nowrap | wrap | wrap-reverse
  @mixin flex-wrap($wrap) {
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    -webkit-flex-wrap: $wrap;
    flex-wrap: $wrap;
  }
  // Flex Direction and Wrap
  // - applies to: flex containers
  // <flex-direction> || <flex-wrap>
  @mixin flex-flow($flow) {
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    -webkit-flex-flow: $flow;
    flex-flow: $flow;
  }
  // Display Order
  // - applies to: flex items
  // <integer>
  @mixin order($val) {
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-box-ordinal-group: $val;
    -webkit-order: $val;
    order: $val;
  }
  // Flex grow factor
  // - applies to: flex items
  // <number>
  @mixin flex-grow($grow) {
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    -webkit-flex-grow: $grow;
    flex-grow: $grow;
  }
  // Flex shrink
  // - applies to: flex item shrink factor
  // <number>
  @mixin flex-shrink($shrink) {
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    -webkit-flex-shrink: $shrink;
    flex-shrink: $shrink;
  }
  // Flex basis
  // - the initial main size of the flex item
  // - applies to: flex itemsnitial main size of the flex item
  // <width>
  @mixin flex-basis($width) {
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    -webkit-flex-basis: $width;
    flex-basis: $width;
  }
  // Axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | space-between | space-around
  @mixin justify-content($justify) {
    -moz-justify-content: $justify;
    -ms-flex-pack: $justify;
    -ms-justify-content: $justify;
    -webkit-justify-content: $justify;
    justify-content: $justify;
  }
  // Packing Flex Lines
  // - applies to: multi-line flex containers
  // flex-start | flex-end | center | space-between | space-around | stretch
  @mixin align-content($align) {
    -moz-align-content: $align;
    -ms-align-content: $align;
    -webkit-align-content: $align;
    align-content: $align;
  }
  // Cross-axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | baseline | stretch
  @mixin align-items($align) {
    -moz-align-items: $align;
    -ms-align-items: $align;
    -webkit-align-items: $align;
    align-items: $align;
  }
  // Cross-axis Alignment
  // - applies to: flex items
  // auto | flex-start | flex-end | center | baseline | stretch
  @mixin align-self($align) {
    -moz-align-self: $align;
    -ms-align-self: $align;
    -webkit-align-self: $align;
    align-self: $align;
  }

  /* Grid
     ========================================================================== */

  @mixin display-grid {
    display: -ms-grid;
    display: grid;
  }

  @mixin grid-template-columns($columns...) {
    -ms-grid-columns: $columns;
    grid-template-columns: $columns;
  }

  @mixin grid-template-rows($rows...) {
    -ms-grid-rows: $rows;
    grid-template-rows: $rows;
  }

  @function grid-repeat($repeat, $stuff: 1fr) {
    $list: ();
    @for $i from 1 through $repeat {
      $list: append($list, $stuff, space);
    }
    @return $list;
  }

  @mixin grid-child($col-start, $col-end, $row-start, $row-end) {
    -ms-grid-column: $col-start;
    -ms-grid-column-span: $col-end - $col-start;
    -ms-grid-row: $row-start;
    -ms-grid-row-span: $row-end - $row-start;
    grid-column: #{$col-start}/#{$col-end};
    grid-row: #{$row-start}/#{$row-end};
  }

  @mixin grid-column($col-start, $col-end) {
    -ms-grid-column: $col-start;
    -ms-grid-column-span: $col-end - $col-start;
    grid-column: #{$col-start} / #{$col-end};
  }

  @mixin grid-row($row-start, $row-end) {
    -ms-grid-row: $row-start;
    -ms-grid-row-span: $row-end - $row-start;
    grid-row: #{$row-start} / #{$row-end};
  }

  @mixin grid-align-self($value) {
    -ms-grid-row-align: $value;
    align-self: $value;
  }

  @mixin grid-justify-self($value) {
    -ms-grid-column-align: $value;
    justify-self: $value;
  }

  /* Box Shadow
     ========================================================================== */
  @mixin box-shadow($shadow) {
    -moz-box-shadow: $shadow;
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;
  }

  /* Filter
     ========================================================================== */
  @mixin filter($filter-type, $filter-amount) {
    -moz-filter: $filter-type + unquote('(#{$filter-amount})');
    -ms-filter: $filter-type + unquote('(#{$filter-amount})');
    -o-filter: $filter-type + unquote('(#{$filter-amount})');
    -webkit-filter: $filter-type + unquote('(#{$filter-amount})');
    filter: $filter-type + unquote('(#{$filter-amount})');
  }

  /* Multiple Column Layout
     ========================================================================== */

  @mixin column-count($value) {
    -moz-column-count: $value;
    -webkit-column-count: $value;
    column-count: $value;
  }

  @mixin column-fill($value) {
    -moz-column-fill: $value;
    -webkit-column-fill: $value;
    column-fill: $value;
  }

  @mixin column-gap($value) {
    -moz-column-gap: $value;
    -webkit-column-gap: $value;
    column-gap: $value;
  }

  @mixin column-rule($value) {
    -moz-column-rule: $value;
    -webkit-column-rule: $value;
    column-rule: $value;
  }

  @mixin column-rule-color($value) {
    -moz-column-rule-color: $value;
    -webkit-column-rule-color: $value;
    column-rule-color: $value;
  }

  @mixin column-rule-style($value) {
    -moz-column-rule-style: $value;
    -webkit-column-rule-style: $value;
    column-rule-style: $value;
  }

  @mixin column-rule-width($value) {
    -moz-column-rule-width: $value;
    -webkit-column-rule-width: $value;
    column-rule-width: $value;
  }

  @mixin column-span($value) {
    -moz-column-span: $value;
    -webkit-column-span: $value;
    column-span: $value;
  }

  @mixin column-width($value) {
    -moz-column-width: $value;
    -webkit-column-width: $value;
    column-width: $value;
  }

  @mixin columns($value) {
    -moz-columns: $value;
    -webkit-columns: $value;
    columns: $value;
  }

  @mixin column-overflow($value) {
    -moz-column-overflow: $value;
    -webkit-column-overflow: $value;
    column-overflow: $value;
  }

  @mixin break-before($value) {
    -moz-break-before: $value;
    -webkit-column-break-before: $value;
    break-before: $value;
  }

  @mixin break-after($value) {
    -moz-break-after: $value;
    -webkit-column-break-after: $value;
    break-after: $value;
  }

  @mixin break-inside($value) {
    -moz-break-inside: $value;
    -webkit-column-break-inside: $value;
    break-inside: $value;
  }

  /* No Select
     ========================================================================== */

  @mixin no-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Placeholder
     ========================================================================== */

  @mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
      @content;
    }
  }

  @mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
      @content;
    }

    @include optional-at-root(':-moz-placeholder') {
      @content;
    }

    @include optional-at-root('::-moz-placeholder') {
      @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
      @content;
    }
  }

  /* Placeholder
     ========================================================================== */

  @mixin autocompleteColor($background, $color, $border) {
    &:-webkit-autofill {
      @include box-shadow(0 0 0 30px $background inset);
      -webkit-text-fill-color: $color;
      caret-color: $color;
      border: 1px solid $border;
      @include transition(background-color 5000s ease-in-out 0s);
    }
  }
